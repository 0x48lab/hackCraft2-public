name: pages-deploy

on:
  release:
    types: [published, edited]  # リリースが公開または編集されたとき
  workflow_dispatch:  # 手動実行も可能に

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get commit information
        id: commit
        run: |
          echo "commit_hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "commit_date=$(git log -1 --format=%cd --date=format:'%Y/%m/%d')" >> $GITHUB_OUTPUT
          echo "commit_message=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT
          echo "commit_author=$(git log -1 --pretty=%an)" >> $GITHUB_OUTPUT

      - name: Create commit info JSON
        run: |
          cat > docs/commit-info.json << EOF
          {
            "hash": "${{ steps.commit.outputs.commit_hash }}",
            "date": "${{ steps.commit.outputs.commit_date }}",
            "message": "${{ steps.commit.outputs.commit_message }}",
            "author": "${{ steps.commit.outputs.commit_author }}"
          }
          EOF

      - name: Get GitHub Releases
        id: releases
        uses: actions/github-script@v7
        with:
          script: |
            // デバッグ情報の出力
            console.log('Fetching releases...');
            
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            console.log('Found releases:', releases.data.map(r => r.tag_name));
            
            const releaseData = releases.data.map(release => ({
              tag_name: release.tag_name,
              name: release.name,
              published_at: release.published_at,
              body: release.body,
              assets: release.assets.map(asset => ({
                name: asset.name,
                size: asset.size,
                download_count: asset.download_count,
                browser_download_url: asset.browser_download_url
              }))
            }));

            // リリースを分類
            const stableReleases = releaseData.filter(r => r.tag_name.startsWith('stable-'))
              .sort((a, b) => {
                // stable-32 から数字部分を抽出して比較
                const numA = parseInt(a.tag_name.split('-')[1]);
                const numB = parseInt(b.tag_name.split('-')[1]);
                return numB - numA; // 降順（新しい順）
              });

            // 最新のstableリリース
            const latestStable = stableReleases[0];
            console.log('Latest stable release:', latestStable?.tag_name);
            
            // リリース情報をJSONファイルとして保存
            const fs = require('fs');
            fs.writeFileSync('docs/releases.json', JSON.stringify(releaseData, null, 2));
            fs.writeFileSync('docs/latest-release.json', JSON.stringify(latestStable, null, 2));

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Add cache control headers
        run: |
          cat > docs/_headers << EOF
          /*
            Cache-Control: no-cache, no-store, must-revalidate
            Pragma: no-cache
            Expires: 0
          EOF

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 