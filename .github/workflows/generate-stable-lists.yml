name: Generate Stable Lists

on:
  push:
    paths:
      - 'docs/stable.json'
  workflow_dispatch:

jobs:
  generate-stable-lists:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.HACKCRAFT2_PAT }}  # hackCraft2リポジトリ用のPAT
      TARGET_REPO: "masafumi-t/hackCraft2"  # 対象リポジトリ
    steps:
      - uses: actions/checkout@v4

      - name: Copy stable.json to downloads and fetch commit info
        run: |
          # stable.jsonの内容を読み込む
          STABLE_JSON=$(cat docs/stable.json)
          JAR_FILENAME=$(echo "$STABLE_JSON" | jq -r '.latest.assets[0].name')
          JSON_FILENAME="${JAR_FILENAME%.jar}.json"
          
          # 同名のJSONファイルが存在するか確認
          if [ -f "docs/downloads/latest/$JSON_FILENAME" ]; then
            # 既存のJSONファイルからコミットハッシュを取得
            EXISTING_JSON=$(cat "docs/downloads/latest/$JSON_FILENAME")
            COMMIT_HASH=$(echo "$EXISTING_JSON" | jq -r '.latest.commit_hash')
            
            if [ -n "$COMMIT_HASH" ] && [ "$COMMIT_HASH" != "null" ]; then
              echo "Found existing commit hash: $COMMIT_HASH"
              
              # GitHub APIを使用してコミット情報を取得
              COMMIT_INFO=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/$TARGET_REPO/commits/$COMMIT_HASH")
              
              COMMIT_MESSAGE=$(echo "$COMMIT_INFO" | jq -r '.commit.message')
              COMMIT_DATE=$(echo "$COMMIT_INFO" | jq -r '.commit.author.date')
              COMMIT_URL=$(echo "$COMMIT_INFO" | jq -r '.html_url')
              
              echo "Commit Information:"
              echo "Message: $COMMIT_MESSAGE"
              echo "Date: $COMMIT_DATE"
              echo "URL: $COMMIT_URL"
              
              # コミット情報をJSONに追加
              STABLE_JSON=$(echo "$STABLE_JSON" | jq --arg hash "$COMMIT_HASH" \
                --arg message "$COMMIT_MESSAGE" \
                --arg date "$COMMIT_DATE" \
                --arg url "$COMMIT_URL" \
                '.latest.commit_info = {"hash": $hash, "message": $message, "date": $date, "url": $url}')
            fi
          fi
          
          # 更新されたJSONファイルを保存
          echo "$STABLE_JSON" > "docs/downloads/latest/$JSON_FILENAME"

      - name: Update stable-list.json
        run: |
          # 既存のstable-list.jsonを読み込む
          if [ -f "docs/stable-list.json" ]; then
            cp docs/stable-list.json stable-list.json
          else
            echo '{"releases": []}' > stable-list.json
          fi
          
          # 最新のstable.jsonの内容を取得
          STABLE_JSON=$(cat docs/stable.json)
          JAR_FILENAME=$(echo "$STABLE_JSON" | jq -r '.latest.assets[0].name')
          JSON_FILENAME="${JAR_FILENAME%.jar}.json"
          SIZE=$(echo "$STABLE_JSON" | jq -r '.latest.assets[0].size')
          DATE=$(echo "$STABLE_JSON" | jq -r '.latest.published_at')
          
          # コミット情報を取得（存在する場合）
          COMMIT_INFO=""
          if [ -f "docs/downloads/latest/$JSON_FILENAME" ]; then
            EXISTING_JSON=$(cat "docs/downloads/latest/$JSON_FILENAME")
            COMMIT_HASH=$(echo "$EXISTING_JSON" | jq -r '.latest.commit_info.hash // empty')
            if [ -n "$COMMIT_HASH" ]; then
              COMMIT_INFO=$(echo "$EXISTING_JSON" | jq -r '.latest.commit_info')
            fi
          fi
          
          # 新しいエントリを追加（コミット情報を含む）
          if [ -n "$COMMIT_INFO" ]; then
            jq --arg name "$JSON_FILENAME" \
               --arg url "downloads/latest/$JSON_FILENAME" \
               --arg size "$SIZE" \
               --arg date "$DATE" \
               --argjson commit "$COMMIT_INFO" \
               '.releases += [{"name": $name, "url": $url, "size": ($size|tonumber), "published_at": $date, "commit_info": $commit}]' \
               stable-list.json > docs/stable-list.json
          else
            jq --arg name "$JSON_FILENAME" \
               --arg url "downloads/latest/$JSON_FILENAME" \
               --arg size "$SIZE" \
               --arg date "$DATE" \
               '.releases += [{"name": $name, "url": $url, "size": ($size|tonumber), "published_at": $date}]' \
               stable-list.json > docs/stable-list.json
          fi

      - name: Commit and Push Changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add docs/stable-list.json "docs/downloads/latest/*.json"
          git commit -m "Update stable lists and JSON files with commit information" || exit 0
          git push 