name: pages-deploy

on:
  repository_dispatch:
    types: [release_published, release_edited]  # hackCraft2からのリリースイベント
  workflow_dispatch:  # 手動実行も可能に

permissions:
  contents: read
  pages: write
  id-token: write

# 環境保護ルールの設定
environment:
  name: github-pages
  url: ${{ steps.deployment.outputs.page_url }}

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get commit information
        id: commit
        run: |
          echo "commit_hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "commit_date=$(git log -1 --format=%cd --date=format:'%Y/%m/%d')" >> $GITHUB_OUTPUT
          echo "commit_message=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT
          echo "commit_author=$(git log -1 --pretty=%an)" >> $GITHUB_OUTPUT

      - name: Create commit info JSON
        run: |
          cat > docs/commit-info.json << EOF
          {
            "hash": "${{ steps.commit.outputs.commit_hash }}",
            "date": "${{ steps.commit.outputs.commit_date }}",
            "message": "${{ steps.commit.outputs.commit_message }}",
            "author": "${{ steps.commit.outputs.commit_author }}"
          }
          EOF

      - name: Get GitHub Releases
        id: releases
        uses: actions/github-script@v7
        with:
          script: |
            // デバッグ情報の出力
            console.log('Fetching releases...');
            
            const releases = await github.rest.repos.listReleases({
              owner: '0x48lab',  // hackCraft2のオーナー
              repo: 'hackCraft2'  // hackCraft2のリポジトリ名
            });
            
            console.log('Found releases:', releases.data.map(r => r.tag_name));
            
            // stable-* タグのリリースを探す
            const stableReleases = releases.data
              .filter(r => r.tag_name.startsWith('stable-'))
              .sort((a, b) => {
                const numA = parseInt(a.tag_name.split('-')[1]);
                const numB = parseInt(b.tag_name.split('-')[1]);
                return numB - numA; // 降順（新しい順）
              });

            const latestStable = stableReleases[0];
            console.log('Latest stable release:', latestStable?.tag_name);

            if (!latestStable) {
              console.log('No stable releases found');
              return;
            }

            // stable.jsonの内容を取得
            const stableJsonResponse = await github.rest.repos.getReleaseAsset({
              owner: '0x48lab',
              repo: 'hackCraft2-public',
              asset_id: latestStable.assets.find(a => a.name === 'stable.json').id
            });

            const stableData = JSON.parse(Buffer.from(stableJsonResponse.data.content, 'base64').toString());
            console.log('Stable data:', stableData);

            // 表示用のデータを整形
            const displayData = {
              latest: {
                name: stableData.latest.name,
                published_at: stableData.latest.published_at,
                paper_version: stableData.latest.paper_version,
                commit_hash: latestStable.tag_name,  // hackCraft2-public のリリースタグを使用
                body: stableData.latest.body,
                assets: stableData.latest.assets.map(asset => ({
                  name: asset.name,
                  size: asset.size,
                  browser_download_url: `https://github.com/0x48lab/hackCraft2-public/releases/download/${latestStable.tag_name}/${asset.name}`
                }))
              }
            };
            
            // ファイルの保存
            const fs = require('fs');
            const stablePath = 'docs/stable.json';
            
            try {
              // ディレクトリの存在確認
              if (!fs.existsSync('docs')) {
                console.log('Creating docs directory...');
                fs.mkdirSync('docs', { recursive: true });
              }

              // ファイルの書き込み
              fs.writeFileSync(stablePath, JSON.stringify(displayData, null, 4));
              
              // パーミッションの設定
              fs.chmodSync(stablePath, 0o644);
              
              console.log('Successfully wrote stable data to:', stablePath);
              console.log('stable.json content:', fs.readFileSync(stablePath, 'utf8'));
            } catch (error) {
              console.error('Error writing stable data:', error);
              throw error;
            }

      - name: List generated files
        run: |
          echo "Contents of docs directory:"
          ls -la docs/
          echo "\nContents of stable.json:"
          cat docs/stable.json

      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          enablement: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Add cache control headers
        run: |
          cat > docs/_headers << EOF
          /*
            Cache-Control: no-cache, no-store, must-revalidate
            Pragma: no-cache
            Expires: 0
          EOF

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs'
          retention-days: 1

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          path: './docs' 